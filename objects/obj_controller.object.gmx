<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite19</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_play_sound(snd_space,0,true);

pitch = 1;

//initialize variables
centreX = room_width/2;
centreY = room_height/2;
initialAngle = 0 //initial angle of planet
angle = initialAngle; //current angle of planet

choice = 1; //choice for dialogue options

timeSpeed = 0.1; //multipyer of the speed of time for time mechanic
timeSpeedSlow = 0.3; //the slow time speed
year = 0;

damage = 0; //initial damage
nut = 0; //initial nut
water = 50; // initial water
damageMax = 100;
nutMax = 100;
waterMax = 100;

minOrbit = 300; // closest planet can get to sun
maxOrbit = 600; //farthest planet can get from sun
orbitDistance = maxOrbit; //distance from sun
viewOrbitDistance = 350;
viewOrbitPercent = 0.65;
viewOrbitMin = 340;
viewOrbitMax = 375;
viewOrbitRange = viewOrbitMax - viewOrbitMin;

acceleration = 0.1; // outward acceleration
velocity = 0; // in/out velocity
pullStrength = -3.5 // strength of planet to gravitate toward sun when pressing space
maxVelocity = 4.5 ; //highest velocity value possible, pos and negative

angularSpeed = 0.01; // speed at which angle changes
minAngularSpeed = 0.005; //speed of farthest orbit
maxAngularSpeed = 0.01; //speed of closest orbit

asteroidDensity = 0.25; //0 = none, 1 = too many
asteroidDistanceMin = minOrbit;
asteroidDistanceMax = 1100;
asteroidMaxVelocity = 1; //max +- velocity of new asteroids

nutrientsDensity = 0.3; //0 = none, 1 = too many
nutrientsDistanceMin = minOrbit;
nutrientsDistanceMax = 1100;
nutrientsMaxVelocity = 1; //max +- velocity of new nutrients

waterDensity = 0.15; //0 = none, 1 = too many
waterDistanceMin = minOrbit;
waterDistanceMax = 1100;
waterMaxVelocity = 1; //max +- velocity of new water

introOver = false //controls stuff that cant happen during the intro

life = 0;
lifeLevel = 0; // game level, used in switch to see which scene to play
scenePart = 0; // part of the scene for the 3rd level switch
state = "talk"; //state
global.menuSize = 150;

instance_create(0,0,obj_menu);

//place planet
planetId = instance_create(centreX, centreY, obj_planet);
with (planetId){
    angle = other.initialAngle;
}

//create view
viewId = instance_create(planetId.x,planetId.y,obj_view);

//create sun
sunId = instance_create(centreX,centreY, obj_sun);


//create stars in background
for (i=0; i&lt;200; i+=1){
    instance_create(0,0,obj_star);
};



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_controller</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set pitch
audio_sound_pitch(0,pitch);

//rotate the planet
angle += angularSpeed*timeSpeed;

//move planet
planetId.x = cos(angle)*orbitDistance+centreX;
planetId.y = -sin(angle)*orbitDistance+centreY;

//put view on planet
var orbitUnit = (orbitDistance-minOrbit)/(maxOrbit-minOrbit);

var viewTargetX = cos(angle)*(viewOrbitRange*orbitUnit + viewOrbitMin) +centreX;
var viewTargetY = -sin(angle)*(viewOrbitRange*orbitUnit + viewOrbitMin)+centreY + global.menuSize/2;
viewId.x = lerp(viewId.x, viewTargetX, 0.9);
viewId.y = lerp(viewId.y, viewTargetY, 0.9);

switch (state)
{
case "orbit":


//create asteroids
if(random(1)&lt;asteroidDensity*timeSpeed) {
    var asteroidDistance = random(asteroidDistanceMax-asteroidDistanceMin) + asteroidDistanceMin;
    
    var asteroidStartX = cos(angle+180)*asteroidDistance+centreX;
    var asteroidStartY = -sin(angle+180)*asteroidDistance+centreY;
    
    var newAsteroid =instance_create(asteroidStartX, asteroidStartY, obj_asteroid);

    with (newAsteroid) {
        velocityX = random(2*other.asteroidMaxVelocity)-other.asteroidMaxVelocity;
        velocityY = random(2*other.asteroidMaxVelocity)-other.asteroidMaxVelocity;
    }             
}    

// create nutrients
if(random(1)&lt;nutrientsDensity*timeSpeed) {
    var nutrientsDistance = random(asteroidDistanceMax-asteroidDistanceMin) + asteroidDistanceMin;
    
    var nutrientsStartX = cos(angle+180)*nutrientsDistance+centreX;
    var nutrientsStartY = -sin(angle+180)*nutrientsDistance+centreY;
    
    var newNutrients =instance_create(nutrientsStartX, nutrientsStartY, obj_nutrients);

    with (newNutrients) {
        velocityX = random(2*other.nutrientsMaxVelocity)-other.nutrientsMaxVelocity;
        velocityY = random(2*other.nutrientsMaxVelocity)-other.nutrientsMaxVelocity;
    }             
}   

// create water
if(random(1)&lt;waterDensity*timeSpeed) {
    var waterDistance = random(waterDistanceMax-asteroidDistanceMin) + waterDistanceMin;
    
    var waterStartX = cos(angle+180)*waterDistance+centreX;
    var waterStartY = -sin(angle+180)*waterDistance+centreY;
    
    var newWater =instance_create(waterStartX, waterStartY, obj_water);

    with (newWater) {
        velocityX = random(2*other.waterMaxVelocity)-other.waterMaxVelocity;
        velocityY = random(2*other.waterMaxVelocity)-other.waterMaxVelocity;
    }             
}  

//RESOURCE MANAGEMENT //
var waterDrainChance = 0.01;
var waterDrainMin = 1;
var waterDrainMax = 3;
var waterSafeMin = 30;
var waterSafeMax = 70;

//drain water
if (random(1)&lt;waterDrainChance*timeSpeed) {
    var orbitMultiplyer = 1 - (orbitDistance-minOrbit)/(maxOrbit-minOrbit);
    water-=random_range(waterDrainMin, waterDrainMax)*orbitMultiplyer;
}
water = clamp(water, 0, waterMax);
//heal damage
damage -= 0.1*timeSpeed;
damage = clamp(damage,0,damageMax);
//drain nut
nut-=0.01*timeSpeed;
nut = clamp(nut,0,nutMax);
//calculate life
if (waterSafeMax &gt; water) and (water &gt; waterSafeMin) and (damage &lt; 50) {
    life+=nut/nutMax*random_range(-0.5,1)*timeSpeed;
} else {
    life-=0.02*timeSpeed;
}
life += random_range(-0.1,0.1)*timeSpeed;
if (life &lt; 1) {
    life = 1;
}

//level up
if (life &gt;= 100) {
    lifeLevel++;
    state = "talk";
    scr_destroy_resources();
    timeSpeed = timeSpeedSlow;
}
break; // end orbit state //

/////TALK STATE
case "talk":
    switch (lifeLevel) {
        case 0:
            switch (scenePart) {
                case 0:
                    audio_play_sound(snd_sad,1,true);
                    scr_text("Press enter.", "", "", 0, 3, "card", noone, "sun");
                    break;
                case 1:
                    scr_text("Welcome to the universe!", "", "", 0, 3, "card", noone, "sun");
                    break;
                case 2:
                    scr_text("I'm so glad you made it.", "", "", 0, 3, "card", noone, "sun");
                    break;
                case 3:
                    scr_text("Let's get started now...", "", "", 0, 3, "card", noone, "sun");
                    break;
                case 4:
                    introOver = true;
                    scr_text("You can press Shift to", "speed up time, and Space to", "jump.", 0, 3, "", face_bored, "sun");
                    obj_sun.face = face_bored;
                    break;
                case 5:
                    scr_text("If you collect enough", "resources out here, life", "will grow on your surface!", 0, 3, "", face_happy, "sun");
                    obj_sun.face = face_happy;
                    break;
                case 6:
                    scr_text("For life to prosper, be", "careful to avoid asteroids,", "and to regulate your water.", 0, 3, "", face_bored, "sun");
                    obj_sun.face = face_bored;
                    break;
                case 7:
                    scr_text("If your water level is too", "high or low, your life", "will start to deteriorate.", 0, 3, "", face_happy, "sun");
                    obj_sun.face = face_happy;
                    break;
                case 8:
                    scr_text("You can track the growth", "of life on your dashboard.", "Good luck!", 0, 3, "", face_bored, "sun");
                    obj_sun.face = face_bored;
                    break;
                case 9:
                    audio_stop_sound(snd_sad);
                    audio_play_sound(snd_space, 0 ,true);
                    scr_return_to_orbit();
                    break
            }
            break;
        case 1:
            switch (scenePart) {
                case 0:
                    scr_update_planet_level();
                    obj_sun.face = face_happy;
                    scr_text("It looks like you leveled up!", "Congratulations!", "", 0, 3, "", face_happy, "sun");
                    break;
                case 1:
                    obj_sun.face = face_bored;
                    scr_text("Protip: The farther away", "you are from me, the slower", "you lose water!", 0, 3, "", face_bored, "sun");
                    break;
                case 2:
                    asteroidDensity = 0.35;
                    nutrientsDensity = 0.2;
                    scr_return_to_orbit();
                    break;
            }
            break;
        case 2:
            switch (scenePart) {
                case 0:
                    scr_update_planet_level();
                    scr_text("You leveled up again!", "It looks like your life", "is really growing!", 0, 3, "", face_bored, "sun");
                    break;
                case 1:
                    scr_return_to_orbit();
                    asteroidDensity = 0.5;
                    nutrientsDensity = 0.2;
                    break;
            }
            break;
        case 3:
            switch (scenePart) {
                case 0:
                    scr_update_planet_level();
                    scr_text("Congratulations! You", "got max level. Now entering", "entering infinite mode!", 0, 3, "", face_bored, "sun");
                    break;
                case 1:
                    asteroidDensity = 0.6;
                    nutrientsDensity = 0.15;
                    scr_return_to_orbit();
                    break;
            }
            break;
        default:
            state= "orbit";
            life = 0;
            nut = 0;
            //reset life chart
            with (obj_menu) {
                for (i=0; i&lt;=graphSize; i+=1) {
                    lifeHistory[i] = 0;
                }
            }
            audio_play_sound(snd_level_up,0,false);
            break;
            
    }
break;
}

// //
// MOVEMENT
// // (runs for all states)
if(introOver) {
    //set timeSpeed
    if keyboard_check(vk_shift) {
        timeSpeed = 1;
        year+=random_range(1,2)*10
    } else {
        timeSpeed = 0.1;
        year+= 0.1;
    }
    
    //jumping
    if(keyboard_check_pressed(vk_space)){
        audio_play_sound(snd_jump,0,false);
        if (orbitDistance == maxOrbit) {
            velocity = pullStrength;
        } else {
            velocity += pullStrength*timeSpeed;
        }
        //particles for planet
        if (orbitDistance &gt;minOrbit) {
            with(obj_planet) {
                var dir = obj_controller.angle*180/pi
                part_type_direction(particle1,dir-15,dir+15,0,0);
                part_type_orientation(particle1,dir-15,dir+15,0,0,0);
                
                var distanceFromCenter = random_range(-sprite_width/3,sprite_width/3);
                var particleX = x+distanceFromCenter;
                var particleY = y-distanceFromCenter;
                emitter1 = part_emitter_create(Sname);
                part_emitter_region(Sname,emitter1,x,x,y,y,ps_shape_ellipse,ps_distr_gaussian);
                part_emitter_burst(Sname,emitter1,particle1,irandom(30)+10);
            }
        }
    }
    //hit the sun
    if (orbitDistance == minOrbit) {
        velocity *= -0.5;
    }
    //accelerate
    if(orbitDistance != maxOrbit){
        velocity+= acceleration*timeSpeed;
    }
    
    //get orbit distance as value from 0 to 1, 0 is min, 1 is max
    var orbitDistanceUnit = (orbitDistance-minOrbit)/(maxOrbit-minOrbit);
    var maxMinAngularSpeedDifference = maxAngularSpeed-minAngularSpeed;
    angularSpeed = (1-orbitDistanceUnit)*maxMinAngularSpeedDifference + minAngularSpeed
    
    velocity = clamp(velocity, -maxVelocity, maxVelocity);
    orbitDistance+= velocity*timeSpeed;
    orbitDistance = clamp(orbitDistance, minOrbit, maxOrbit);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

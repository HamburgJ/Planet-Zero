<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>textTop = "";
textMiddle = "";
textBottom = ""
state = "top";
done = false;
type = ""
face= noone;
x = 150;
y = 625;
lengthAppearing = 0;
alarmTime = 0;
alarm[0] = 1;
intensity = 0; //shakeyness
lineDistance = 35; //distance between lines
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {
    case "top":
        var len = string_length(string(textTop))
    break;
    case "middle":
        var len = string_length(string(textMiddle))
    break; 
    case "bottom":
        var len = string_length(string(textBottom))
    break;
}

if (len&gt;lengthAppearing) {
    alarm[0] = alarmTime;
    lengthAppearing++;
} else {
    done = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 150;
y = 625;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//new background
draw_sprite(spr_menu,0,0,750-170);

draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_set_colour(c_white);
draw_set_font(fnt_regular);
switch(type) {
case "":
//draw face
draw_sprite_ext(face, 0, 70, y+60,0.75,0.75,0,c_black,1); 
switch (state) {
    case "top":
    //get how long the string is in terms of width
    length = string_length(string(textTop));
    
    for(i=1;i&lt;=lengthAppearing;i+=1){ //loop through each character of the string
        str=string_copy(textTop,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textTop,1,i)); //how far to offset the text
        draw_text(x+length_so_far+random_range(-intensity,intensity),y+random_range(-intensity,intensity),str);
    }
    
    if (lengthAppearing = length) {
        state = "middle";
        lengthAppearing = 0;
    }
    break;
    
    
    
    
    case "middle":
    //draw top text
    for(i=1;i&lt;=string_length(textTop);i+=1){ //loop through each character of the string
        str=string_copy(textTop,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textTop,1,i)); //how far to offset the text
        draw_text(x+length_so_far+random_range(-intensity,intensity),y+random_range(-intensity,intensity),str);
    }
    //get how long the string is in terms of width
    length = string_length(string(textMiddle));
    
    for(i=1;i&lt;=lengthAppearing;i+=1){ //loop through each character of the string
        str=string_copy(textMiddle,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textMiddle,1,i)); //how far to offset the text
        draw_text(x+length_so_far+random_range(-intensity,intensity),y+random_range(-intensity,intensity)+lineDistance,str);
    }
    
    if (lengthAppearing = length) {
        state = "bottom";
        lengthAppearing = 0;
    }
    
    break;   
    
    
    
    
    case "bottom":
    //draw top text
    for(i=1;i&lt;=string_length(textTop);i+=1){ //loop through each character of the string
        str=string_copy(textTop,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textTop,1,i)); //how far to offset the text
        draw_text(x+length_so_far+random_range(-intensity,intensity),y+random_range(-intensity,intensity),str);
    }
    //draw middle text
    for(i=1;i&lt;=string_length(textMiddle);i+=1){ //loop through each character of the string
        str=string_copy(textMiddle,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textMiddle,1,i)); //how far to offset the text
        draw_text(x+length_so_far+random_range(-intensity,intensity),y+random_range(-intensity,intensity)+lineDistance,str);
    }
    //get how long the string is in terms of width
    length = string_length(string(textBottom));
    
    for(i=1;i&lt;=lengthAppearing;i+=1){ //loop through each character of the string
        str=string_copy(textBottom,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textBottom,1,i)); //how far to offset the text
        draw_text(x+length_so_far+random_range(-intensity,intensity),y+random_range(-intensity,intensity)+lineDistance*2,str);
    }
}
break;

//title and end cards
case "card":
    draw_set_colour(c_black);
    draw_rectangle(0,0,600,750,false);
    draw_set_font(fnt_large);
    draw_set_colour(c_white);
    //get how long the string is in terms of width
    length = string_length(string(textTop));
    
    for(i=1;i&lt;=lengthAppearing;i+=1){ //loop through each character of the string
        str=string_copy(textTop,i,1); //1 character of the string 
        length_so_far=string_width(string_copy(textTop,1,i)); //how far to offset the text
        draw_text(view_wview[0]/2+length_so_far+random_range(-intensity,intensity)-string_width(textTop)/2,view_hview[0]/2+random_range(-intensity,intensity)-string_height(textTop)/2,str);
    }
    
    if (lengthAppearing = length) {
        done = true;
    }
break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (done) {
    obj_controller.scenePart+=0.5;
    instance_destroy();
} else {
    if (type = "") {
        done = true;
        state = "bottom";
        lengthAppearing = string_length(string(textBottom));
    } else {
        done = true;
        lengthAppearing = string_length(string(textTop));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
